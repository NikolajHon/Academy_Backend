openapi: 3.0.0
info:
  title: Študentské fórum FSA
  version: 1.0.0
  description: API pre správu diskusných príspevkov a úloh k lekciám.

paths:
  /users/{keycloakId}/courses/{courseId}/rating:
    put:
      tags: [ CourseProgress ]
      summary: Set user rating on a course
      operationId: setUserCourseRating
      parameters:
        - name: keycloakId          # было userId
          in: path
          required: true
          description: Keycloak subject (sub)
          schema:
            type: string            # был integer(int64)
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rating'
      responses:
        '200':
          description: Rating updated

    get:
      tags: [ CourseProgress ]
      summary: Get user rating on a course
      operationId: getUserCourseRating
      parameters:
        - name: keycloakId
          in: path
          required: true
          description: Keycloak subject (sub)
          schema:
            type: string
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Rating retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'


  /users/courses/{courseId}/ratings:
    get:
      tags:
        - CourseProgress
      summary: List all CourseProgress for a course (with full user objects)
      operationId: listCourseProgressByCourseWithUser
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Array of CourseProgress entities enriched with User
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseProgressWithUser'

  /users/{userId}:
    delete:
      summary: Delete a user
      operationId: deleteUser
      tags:
        - User
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
  /courses/{courseId}/users/{userId}/progress:
    get:
      summary: Receive all completed user lessons within the course
      operationId: getCompletedCourseLessons
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: userId
          in: path
          required: true
          description: Keycloak user ID
          schema:
            type: string
      responses:
        '200':
          description: List of lesson IDs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LessonListResponse'

  /courses/{courseId}/users/{userId}/progress/lessons/{lessonId}:
    post:
      summary: Add the user's lesson to the list of completed lessons
      operationId: addCompletedLesson
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: userId
          in: path
          required: true
          description: Keycloak user ID
          schema:
            type: string
        - name: lessonId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Lesson successfully added

    delete:
      summary: Remove a lesson from the passed list
      operationId: removeCompletedLesson
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: userId
          in: path
          required: true
          description: Keycloak user ID
          schema:
            type: string
        - name: lessonId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: The lesson has been successfully deleted

  /video/{lessonId}/video-materials/{videoMaterialId}:

    delete:
      summary: Delete a video material from a lesson
      operationId: deleteVideoMaterial
      tags:
        - Lesson
      parameters:
        - name: lessonId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: videoMaterialId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Video material deleted
        '404':
          description: Lesson or VideoMaterial not found
  /video/{lessonId}/video-materials:
    get:
      summary: Get all video materials for a lesson
      operationId: getVideoMaterialsByLesson
      tags:
        - Lesson
      parameters:
        - name: lessonId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: List of video materials for the lesson
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VideoMaterial'
        '404':
          description: Lesson not found

    post:
      summary: Create a new video material for a lesson
      operationId: createVideoMaterial
      tags:
        - Lesson
      parameters:
        - name: lessonId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVideoMaterialRequest'
      responses:
        '201':
          description: Video material created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoMaterial'

  /lessons/{lessonId}/questions:
    get:
      summary: Get all questions in a lesson
      operationId: getQuestionsByLesson
      tags:
        - Lesson
      parameters:
        - name: lessonId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Paged list of questions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionsResponse'
        '404':
          description: Lesson not found

    post:
      summary: Create a new question in a lesson
      operationId: createQuestion
      tags:
        - Lesson
      parameters:
        - name: lessonId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateQuestionRequest'
      responses:
        '201':
          description: Question created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'

  /questions/{questionId}:
    get:
      summary: Get a question by ID (with its options)
      operationId: getQuestionById
      tags:
        - Question
      parameters:
        - name: questionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Question details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        '404':
          description: Question not found

    put:
      summary: Update a question
      operationId: updateQuestion
      tags:
        - Question
      parameters:
        - name: questionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateQuestionRequest'
      responses:
        '200':
          description: Question updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        '404':
          description: Question not found

    delete:
      summary: Delete a question
      operationId: deleteQuestion
      tags:
        - Question
      parameters:
        - name: questionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Question deleted
        '404':
          description: Question not found

  /courses/{courseId}/topics:
    get:
      summary: Get topics of a course forum
      operationId: getTopicsByCourse
      tags: [ Forum ]
      parameters:
        - name: courseId
          in: path
          required: true
          schema: { type: integer, format: int64 }
        - name: page
          in: query
          required: false
          schema: { type: integer, minimum: 0, default: 0 }
        - name: size
          in: query
          required: false
          schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
      responses:
        '200':
          description: Paged list of topics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicsResponse'

    post:
      summary: Create new topic in a course forum
      operationId: createTopic
      tags: [ Forum ]
      parameters:
        - name: courseId
          in: path
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTopicRequest'
      responses:
        '201':
          description: Topic created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'

  /topics/{topicId}:
    get:
      summary: Get a topic by ID
      operationId: getTopicById
      tags: [ Forum ]
      parameters:
        - name: topicId
          in: path
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: Topic details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
        '404': { description: Topic not found }

    put:
      summary: Update topic (title or status)
      operationId: updateTopic
      tags: [ Forum ]
      parameters:
        - name: topicId
          in: path
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTopicRequest'
      responses:
        '200':
          description: Topic updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
        '404': { description: Topic not found }

    delete:
      summary: Delete topic
      operationId: deleteTopic
      tags: [ Forum ]
      parameters:
        - name: topicId
          in: path
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '204': { description: Topic deleted }
        '404': { description: Topic not found }

  /topics/{topicId}/posts:
    get:
      summary: Get root posts (questions) of topic
      operationId: getPostsByTopic
      tags: [ Forum ]
      parameters:
        - name: topicId
          in: path
          required: true
          schema: { type: integer, format: int64 }
        - name: page
          in: query
          required: false
          schema: { type: integer, minimum: 0, default: 0 }
        - name: size
          in: query
          required: false
          schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
      responses:
        '200':
          description: Paged list of posts (only first-level)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostsResponse'
        '404': { description: Topic not found }

    post:
      summary: Create a root post (question) in topic
      operationId: createPost
      tags: [ Forum ]
      parameters:
        - name: topicId
          in: path
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostRequest'
      responses:
        '201':
          description: Post created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404': { description: Topic not found }

  /posts/{postId}:
    get:
      summary: Get a single post with its replies (recursive tree)
      operationId: getPostById
      tags: [ Forum ]
      parameters:
        - name: postId
          in: path
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: Post with nested replies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404': { description: Post not found }

    put:
      summary: Update a post
      operationId: updatePost
      tags: [ Forum ]
      parameters:
        - name: postId
          in: path
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePostRequest'
      responses:
        '200':
          description: Post updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404': { description: Post not found }

    delete:
      summary: Delete a post
      operationId: deletePost
      tags: [ Forum ]
      parameters:
        - name: postId
          in: path
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '204': { description: Post deleted }
        '404': { description: Post not found }

  /posts/{postId}/replies:
    post:
      summary: Reply to a post
      operationId: createReply
      tags: [ Forum ]
      parameters:
        - name: postId
          in: path
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReplyRequest'
      responses:
        '201':
          description: Reply created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404': { description: Post not found }
  /assignments/{assignmentId}/submissions:
    post:
      summary: Submit student code for automatic checking
      operationId: submitAssignment
      tags:
        - Submission
      parameters:
        - name: assignmentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmissionRequest'
      responses:
        '200':
          description: Results of test case execution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionResponse'
  /courses:
    get:
      summary: Get all courses
      operationId: getAllCourses
      tags:
        - Course
      responses:
        '200':
          description: List of courses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoursesResponse'
    post:
      summary: Create new course
      operationId: createCourse
      tags:
        - Course
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCourseRequest'
      responses:
        '201':
          description: Course created

  /courses/{id}/lessons:
    get:
      summary: Get lessons by course ID
      operationId: getLessonsByCourseId
      tags:
        - Lesson
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: List of lessons for the course
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lesson'
        '404':
          description: Course not found

  /lessons:
    post:
      summary: Create new lesson
      operationId: createLesson
      tags:
        - Lesson
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLessonRequest'
      responses:
        '201':
          description: Lesson created

  /lessons/{lessonId}/assignments:
    get:
      summary: Get assignments for a lesson
      operationId: getAssignmentsByLesson
      tags:
        - Assignment
      parameters:
        - name: lessonId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: List of assignments for the lesson
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Assignment'
        '404':
          description: Lesson not found
    post:
      summary: Create new assignment under a lesson
      operationId: createAssignment
      tags:
        - Assignment
      parameters:
        - name: lessonId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAssignmentRequest'
      responses:
        '201':
          description: Assignment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assignment'

  /assignments/{assignmentId}:
    get:
      summary: Get an assignment by ID
      operationId: getAssignmentById
      tags:
        - Assignment
      parameters:
        - name: assignmentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Assignment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assignment'
        '404':
          description: Assignment not found
    put:
      summary: Update an assignment
      operationId: updateAssignment
      tags:
        - Assignment
      parameters:
        - name: assignmentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAssignmentRequest'
      responses:
        '200':
          description: Assignment updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assignment'
        '404':
          description: Assignment not found
    delete:
      summary: Delete an assignment
      operationId: deleteAssignment
      tags:
        - Assignment
      parameters:
        - name: assignmentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Assignment deleted
        '404':
          description: Assignment not found

  /assignments/{assignmentId}/test-cases:
    get:
      summary: Get all test cases for an assignment
      description: Retrieve the list of all test cases associated with the given assignment.
      operationId: getTestCasesByAssignment
      tags:
        - TestCase
      parameters:
        - name: assignmentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: A list of test cases
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestCase'
        '404':
          description: Assignment not found

    post:
      summary: Create a new test case
      description: Add a new test case to the specified assignment.
      operationId: createTestCase
      tags:
        - TestCase
      parameters:
        - name: assignmentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTestCaseRequest'
      responses:
        '201':
          description: Test case created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestCase'
        '404':
          description: Assignment not found

  /assignments/{assignmentId}/test-cases/{testCaseId}:
    delete:
      summary: Delete a test case
      description: Remove the specified test case from its assignment.
      operationId: deleteTestCase
      tags:
        - TestCase
      parameters:
        - name: assignmentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: testCaseId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Test case deleted
        '404':
          description: Assignment or Test case not found


  /users:
    get:
      summary: Get all users
      operationId: getAllUsers
      tags:
        - User
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
    post:
      summary: Create a new user
      operationId: createUser
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'   # ← тут ссылка!
      responses:
        '201':
          description: User created

  /users/{userId}/courses/{courseId}:
    post:
      summary: Enroll user to course
      operationId: enrollUserToCourse
      tags:
        - User
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User enrolled to course
        '404':
          description: User or Course not found

    delete:
      summary: Unenroll user from course
      operationId: unenrollUserFromCourse
      tags:
        - User
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User unenrolled from course (no content)
        '404':
          description: User or Course not found




components:
  parameters:
    courseId:
      name: courseId
      in: path
      required: true
      schema:
        type: integer
        format: int64
    userId:
      name: userId
      in: path
      required: true
      schema:
        type: integer
        format: int64
  schemas:
    CourseProgressWithUser:
      type: object
      properties:
        courseProgressId:
          $ref: '#/components/schemas/CourseProgressId'
        user:
          $ref: '#/components/schemas/User'
        lessonIds:
          type: array
          items:
            type: integer
            format: int64
        rating:
          type: integer
          format: int32
      required:
        - courseProgressId
        - user
        - lessonIds
        - rating
    CourseProgress:
      type: object
      properties:
        courseProgressId:
          $ref: '#/components/schemas/CourseProgressId'
        lessonIds:
          type: array
          items:
            type: integer
            format: int64
        rating:
          type: integer
          format: int32
      required:
        - courseProgressId
        - lessonIds
        - rating

    CourseProgressId:
      type: object
      properties:
        courseId:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
      required:
        - courseId
        - userId

    Rating:
      type: object
      properties:
        rating:
          type: integer
          format: int32
      required:
        - rating
    LessonListResponse:
      type: object
      properties:
        lessons:
          type: array
          description: Array of passed lessons identifiers
          items:
            type: integer
            format: int64
      example:
        lessons: [ 1, 2, 5, 17 ]
    CreateVideoMaterialRequest:
      type: object
      required:
        - title
        - url
      properties:
        title:
          type: string
          description: "Video Title"
        url:
          type: string
          description: "Video link"

    VideoMaterial:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: "Unique video identifier"
        title:
          type: string
        url:
          type: string
        lessonId:
          type: integer
          format: int64
          description: "ID of the lesson to which the video is linked"

    CourseSummary:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
      required: [ id, name ]
    CreateTopicRequest:
      type: object
      required: [ title ]
      properties:
        title:
          type: string
        lessonId:
          type: integer
          format: int64
          nullable: true
          description: Optional lesson reference; null → general topic

    UpdateTopicRequest:
      allOf:
        - $ref: '#/components/schemas/CreateTopicRequest'
        - type: object
          required: [ id ]
          properties:
            id:
              type: integer
              format: int64
            status:
              $ref: '#/components/schemas/TopicStatus'

    Topic:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        courseId:
          type: integer
          format: int64
        lessonId:
          type: integer
          format: int64
          nullable: true
        status:
          $ref: '#/components/schemas/TopicStatus'
        createdAt:
          type: string
          format: date-time
        createdById:
          type: integer
          format: int64
        postsCount:
          type: integer
          format: int32
        lastActivityAt:
          type: string
          format: date-time

    TopicStatus:
      type: string
      enum: [ OPEN, CLOSED, ARCHIVED ]

    TopicsResponse:
      type: object
      properties:
        topics:
          type: array
          items: { $ref: '#/components/schemas/Topic' }
        page:
          type: integer
        size:
          type: integer
        totalElements:
          type: integer
        totalPages:
          type: integer

    CreatePostRequest:
      type: object
      required: [ content ]
      properties:
        content:
          type: string

    CreateReplyRequest:
      type: object
      required: [ content ]
      properties:
        content:
          type: string

    UpdatePostRequest:
      type: object
      required: [ id, content ]
      properties:
        id:
          type: integer
          format: int64
        content:
          type: string

    Post:
      type: object
      properties:
        id:
          type: integer
          format: int64
        topicId:
          type: integer
          format: int64
        parentId:
          type: integer
          format: int64
          nullable: true
        authorName:
          type: string
          description: "Human-readable name of the post's author"
        content:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
          nullable: true
        status:
          $ref: '#/components/schemas/PostStatus'
        replies:
          type: array
          description: Recursive list of replies; omitted in collections
          items: { $ref: '#/components/schemas/Post' }

    PostStatus:
      type: string
      enum: [ ACTIVE, HIDDEN, DELETED ]

    PostsResponse:
      type: object
      properties:
        posts:
          type: array
          items: { $ref: '#/components/schemas/Post' }
        page:
          type: integer
        size:
          type: integer
        totalElements:
          type: integer
        totalPages:
          type: integer
    SubmissionRequest:
      type: object
      required:
        - code
      properties:
        code:
          type: string
          description: "Student's code to be composed with teacherCode and executed"

    TestCaseResult:
      type: object
      properties:
        input:
          type: string
        expectedOutput:
          type: string
        actualOutput:
          type: string
        passed:
          type: boolean

    SubmissionResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/TestCaseResult'

    CreateTestCaseRequest:
      type: object
      required:
        - input
        - expectedOutput
      properties:
        input:
          type: string
          description: "The input data for this test case"
        expectedOutput:
          type: string
          description: "The expected result when running the assignment code"

    TestCase:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: "Auto-generated test case ID"
        input:
          type: string
          description: "The input data for this test case"
        expectedOutput:
          type: string
          description: "The expected result when running the assignment code"

    CreateCourseRequest:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
        description:
          type: string

    CreateLessonRequest:
      type: object
      required:
        - title
        - content
        - courseId
      properties:
        title:
          type: string
        content:
          type: string
        courseId:
          type: integer
          format: int64

    CreateAssignmentRequest:
      type: object
      required:
        - description
        - teacherCode
        - templateCode
        - expectedOutput
        - outputType
      properties:
        description:
          type: string
          description: "Human-readable description of the task"
        teacherCode:
          type: string
          description: "Reference solution code for teachers"
        templateCode:
          type: string
          description: "Starter code template for students"
        expectedOutput:
          type: string
          description: "Expected output for automatic grading"
        outputType:
          $ref: '#/components/schemas/AssignmentOutputType'
        testCases:
          type: array
          items:
            $ref: '#/components/schemas/CreateTestCaseRequest'
          description: "Optional list of test cases to create together with this assignment"

    UpdateAssignmentRequest:
      allOf:
        - $ref: '#/components/schemas/CreateAssignmentRequest'
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int64
              description: "ID of the assignment to update"

    Assignment:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: "Unique identifier of the assignment"
        description:
          type: string
        teacherCode:
          type: string
        templateCode:
          type: string
        expectedOutput:
          type: string
        outputType:
          $ref: '#/components/schemas/AssignmentOutputType'
        testCases:
          type: array
          items:
            $ref: '#/components/schemas/TestCase'
          description: "List of all test cases associated with this assignment"

    AssignmentOutputType:
      type: string
      enum:
        - STRING
        - INT
        - JSON
      description: "Type of the expected output used for automatic checking"

    CreateQuestionRequest:
      type: object
      required:
        - text
        - type
      properties:
        text:
          type: string
        type:
          $ref: '#/components/schemas/QuestionType'
        options:
          type: array
          items:
            $ref: '#/components/schemas/CreateAnswerOptionRequest'
          description: Optional list of answer options

    UpdateQuestionRequest:
      allOf:
        - $ref: '#/components/schemas/CreateQuestionRequest'
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int64

    Question:
      type: object
      properties:
        id:
          type: integer
          format: int64
        text:
          type: string
        type:
          $ref: '#/components/schemas/QuestionType'
        options:
          type: array
          items:
            $ref: '#/components/schemas/AnswerOption'

    QuestionsResponse:
      type: object
      properties:
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'
        page:
          type: integer
        size:
          type: integer
        totalElements:
          type: integer
        totalPages:
          type: integer

    QuestionType:
      type: string
      enum:
        - SINGLE_CHOICE
        - MULTIPLE_CHOICE
        - OPEN
      description: Тип вопроса

    CreateAnswerOptionRequest:
      type: object
      required:
        - text
        - correct
      properties:
        text:
          type: string
        correct:
          type: boolean

    AnswerOption:
      type: object
      properties:
        id:
          type: integer
          format: int64
        text:
          type: string
        correct:
          type: boolean


    Lesson:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        content:
          type: string
        courseId:
          type: integer
          format: int64
        assignments:
          type: array
          items:
            $ref: '#/components/schemas/Assignment'
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'

    Course:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        lessons:
          type: array
          items:
            $ref: '#/components/schemas/Lesson'

    CreateUserRequest:
      type: object
      required:
        - givingName
        - familyName
        - email
        - role
        - keycloakId
      properties:
        givingName:
          type: string
        familyName:
          type: string
        email:
          type: string
        role:
          type: string
          enum:
            - Student
            - Teacher
        keycloakId:
          type: string
          description: "Keycloak subject (sub) identifier"

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        givingName:
          type: string
        familyName:
          type: string
        email:
          type: string
        keycloakId:
          type: string
          description: "Keycloak subject (sub) identifier"
        role:
          type: string
          enum:
            - Student
            - Teacher
        rating:
          type: integer
          format: int32
          description: Рейтинг пользователя
        courses:
          type: array
          items:
            $ref: '#/components/schemas/CourseSummary'

    CoursesResponse:
      type: object
      properties:
        courses:
          type: array
          items:
            $ref: '#/components/schemas/Course'

    UsersResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'

